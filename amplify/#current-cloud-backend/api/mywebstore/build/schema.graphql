
type Product @aws_api_key @aws_cognito_user_pools {
  id: ID!
  title: String!
  description: String
  image: String
  featured: Boolean
  price: Float
  orders(order_id: ModelIDKeyConditionInput, filter: ModelProductOrderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProductOrderConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ProductOrder {
  product_id: ID!
  order_id: ID!
  order: Order
  id: ID!
  product: Product
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  customer: String
}

type Order {
  order_id: ID!
  id: ID!
  user: String!
  date: String
  total: Float
  products(product_id: ModelIDKeyConditionInput, filter: ModelProductOrderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProductOrderConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  customer: String
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
  createProduct(input: CreateProductInput!, condition: ModelProductConditionInput): Product
  updateProduct(input: UpdateProductInput!, condition: ModelProductConditionInput): Product
  deleteProduct(input: DeleteProductInput!, condition: ModelProductConditionInput): Product
  createProductOrder(input: CreateProductOrderInput!, condition: ModelProductOrderConditionInput): ProductOrder
  updateProductOrder(input: UpdateProductOrderInput!, condition: ModelProductOrderConditionInput): ProductOrder
  deleteProductOrder(input: DeleteProductOrderInput!, condition: ModelProductOrderConditionInput): ProductOrder
  createOrder(input: CreateOrderInput!, condition: ModelOrderConditionInput): Order
  updateOrder(input: UpdateOrderInput!, condition: ModelOrderConditionInput): Order
  deleteOrder(input: DeleteOrderInput!, condition: ModelOrderConditionInput): Order
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProductConnection @aws_api_key @aws_cognito_user_pools {
  items: [Product]!
  nextToken: String
}

input ModelProductFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  featured: ModelBooleanInput
  price: ModelFloatInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
}

type Query {
  getProductOrder(id: ID!): ProductOrder
  listProductOrders(filter: ModelProductOrderFilterInput, limit: Int, nextToken: String): ModelProductOrderConnection
  getOrder(id: ID!): Order
  listOrders(filter: ModelOrderFilterInput, limit: Int, nextToken: String): ModelOrderConnection
  getProduct(id: ID!): Product @aws_api_key @aws_cognito_user_pools
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection @aws_api_key @aws_cognito_user_pools
}

input ModelProductConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  featured: ModelBooleanInput
  price: ModelFloatInput
  and: [ModelProductConditionInput]
  or: [ModelProductConditionInput]
  not: ModelProductConditionInput
}

input CreateProductInput {
  id: ID
  title: String!
  description: String
  image: String
  featured: Boolean
  price: Float
}

input UpdateProductInput {
  id: ID!
  title: String
  description: String
  image: String
  featured: Boolean
  price: Float
}

input DeleteProductInput {
  id: ID!
}

type ModelProductOrderConnection @aws_api_key @aws_cognito_user_pools {
  items: [ProductOrder]!
  nextToken: String
}

input ModelProductOrderFilterInput {
  product_id: ModelIDInput
  order_id: ModelIDInput
  id: ModelIDInput
  and: [ModelProductOrderFilterInput]
  or: [ModelProductOrderFilterInput]
  not: ModelProductOrderFilterInput
}

input ModelProductOrderConditionInput {
  product_id: ModelIDInput
  order_id: ModelIDInput
  and: [ModelProductOrderConditionInput]
  or: [ModelProductOrderConditionInput]
  not: ModelProductOrderConditionInput
}

input CreateProductOrderInput {
  product_id: ID!
  order_id: ID!
  id: ID
}

input UpdateProductOrderInput {
  product_id: ID
  order_id: ID
  id: ID!
}

input DeleteProductOrderInput {
  id: ID!
}

type ModelOrderConnection {
  items: [Order]!
  nextToken: String
}

input ModelOrderFilterInput {
  order_id: ModelIDInput
  id: ModelIDInput
  user: ModelStringInput
  date: ModelStringInput
  total: ModelFloatInput
  and: [ModelOrderFilterInput]
  or: [ModelOrderFilterInput]
  not: ModelOrderFilterInput
}

input ModelOrderConditionInput {
  order_id: ModelIDInput
  user: ModelStringInput
  date: ModelStringInput
  total: ModelFloatInput
  and: [ModelOrderConditionInput]
  or: [ModelOrderConditionInput]
  not: ModelOrderConditionInput
}

input CreateOrderInput {
  order_id: ID!
  id: ID
  user: String!
  date: String
  total: Float
}

input UpdateOrderInput {
  order_id: ID
  id: ID!
  user: String
  date: String
  total: Float
}

input DeleteOrderInput {
  id: ID!
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

